{"version":3,"sources":["containers/graph.png","containers/avg.jpeg","containers/cones.png","containers/rgb.png","Context.js","containers/Colors.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Context","React","createContext","Provider","Consumer","Colors","props","state","context","people","sharing","hue","color","page","tests","guess","handleChange","event","setState","target","id","value","handleChangeComplete","hsl","h","nextColor","handleSubmit","length","error","house","user","users","userId","username","String","cost","comments","houses","push","updateContext","history","this","console","log","className","style","background","width","height","marginLeft","onChangeComplete","type","onClick","map","test","Math","abs","position","right","bottom","src","graph","avg","cones","rgb","Component","contextType","Switch","Route","path","exact","component","App","localStorage","setItem","JSON","stringify","Routes","Boolean","window","location","hostname","match","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e39621a8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/graph.cd84b857.png\";","module.exports = __webpack_public_path__ + \"static/media/avg.5e705c37.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/cones.6a85887d.png\";","module.exports = __webpack_public_path__ + \"static/media/rgb.bd51bd33.png\";","import React from 'react';\n\n// this is the equivalent to the createStore method of Redux\n// https://redux.js.org/api/createstore\n\nconst Context = React.createContext();\nexport const Provider = Context.Provider\nexport const Consumer = Context.Consumer\n\nexport default Context;","import React, { Component } from \"react\";\nimport Context from \"../Context\";\nimport { Link } from \"react-router-dom\";\nimport ReactTable from \"react-table\";\nimport \"react-table/react-table.css\";\nimport { Slider, Button } from \"antd\";\nimport \"../App.css\";\n\nimport { SliderPicker } from \"react-color\";\nimport Redirect from \"react-router-dom/Redirect\";\n\nimport graph from \"./graph.png\";\nimport avg from \"./avg.jpeg\";\nimport cones from \"./cones.png\";\nimport rgb from \"./rgb.png\";\n\nexport default class Colors extends Component {\n  static contextType = Context;\n\n  constructor(props) {\n    super(props);\n  }\n\n  state = {\n    context: {},\n    people: \"\",\n    sharing: true,\n    hue: 1.1,\n    color: \"\",\n    page: 0,\n    tests: [\n      { hue: 5, guess: 0 },\n      { hue: 105, guess: 0 },\n      { hue: 205, guess: 0 },\n      { hue: 305, guess: 0 },\n      { hue: 25, guess: 0 },\n      { hue: 125, guess: 0 },\n      { hue: 225, guess: 0 },\n      { hue: 325, guess: 0 },\n      { hue: 45, guess: 0 },\n      { hue: 145, guess: 0 },\n      { hue: 245, guess: 0 },\n      { hue: 345, guess: 0 },\n      { hue: 65, guess: 0 },\n      { hue: 165, guess: 0 },\n      { hue: 265, guess: 0 },\n      { hue: 85, guess: 0 },\n      { hue: 185, guess: 0 },\n      { hue: 285, guess: 0 },\n    ],\n  };\n\n  componentDidMount() {\n    const context = this.context;\n    this.setState({ context });\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      [event.target.id]: event.target.value,\n    });\n  };\n\n  handleChangeComplete = (color) => {\n    this.setState({ hue: color.hsl.h, color: color });\n  };\n\n  nextColor = () => {\n    let tests = this.state.tests;\n    tests[this.state.page].guess = this.state.hue;\n    this.setState({ page: this.state.page + 1, tests: tests });\n  };\n\n  handleSubmit = () => {\n    if (this.state.people.length < 1) {\n      this.setState({ error: \"Please enter number of people\" });\n      return false;\n    }\n    let context = this.context;\n    let house = {\n      user: context.context.users[context.context.userId].username,\n      people: this.state.people,\n      sharing: String(this.state.sharing),\n      cost: this.state.cost,\n      comments: [],\n    };\n    context.context.houses.push(house);\n    this.context.updateContext(context);\n    this.props.history.push(\"/houses\");\n  };\n\n  render() {\n    console.log(this.state.hue);\n    return (\n      <div>\n        <div className=\"container\">\n          {this.state.page < 18 ? (\n            <div>\n              <div className=\"header\">\n                <div className=\"header-text\">Color Test</div>\n              </div>\n              <div className=\"color-test\">\n                <div\n                  style={{\n                    background: `hsl(${this.state.hue},100%,50%)`,\n                    width: 200,\n                    height: 200,\n                  }}\n                />\n                <div\n                  style={{\n                    background: `hsl(${\n                      this.state.tests[this.state.page].hue\n                    },100%,50%)`,\n                    width: 200,\n                    height: 200,\n                    marginLeft: 20,\n                  }}\n                />\n\n                <SliderPicker\n                  color={this.state.color}\n                  onChangeComplete={this.handleChangeComplete}\n                />\n\n                <Button\n                  className=\"confirm\"\n                  type=\"primary\"\n                  onClick={this.nextColor}\n                >\n                  Confirm\n                </Button>\n\n                <div className=\"proggress\">{this.state.page} / 18</div>\n                <div className=\"explain\">\n                  Drag and drop the slider to change the color of the left\n                  square, and try to match it best to the color on the right!{\" \"}\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div>\n              <div className=\"header\">\n                <div className=\"header-text\">Results</div>\n              </div>\n              <div className=\"color-test\">\n                <div className=\"graph-container\">\n                  {this.state.tests.map((test) => (\n                    <div\n                      style={{\n                        background: `hsl(${test.hue},100%,50%)`,\n                        width: 20,\n                        height:\n                          800 * (1 - Math.abs(test.hue - test.guess) / 360) -\n                          400,\n                        position: \"absolute\",\n                        right: test.hue,\n                        bottom: 0,\n                      }}\n                    />\n                  ))}\n                  <img src={graph} className=\"scale\" />\n                </div>\n                <div className=\"rest\">\n                  <div className=\"compare\">\n                    Compare your results to the average!\n                  </div>\n                  <img src={avg} className=\"avg\" />\n                  <div className=\"compare\">Why does this occur?</div>\n                  <img src={cones} className=\"cones\" />\n                  <div className=\"para\">\n                    The human eye is made up out of rods and cones behind the\n                    lens. Rods are the cells that determine brightness while\n                    cones are used to determine the color of the light. Our eyes\n                    combine the signals coming from many of these cells to\n                    process color and light.\n                  </div>\n                  <img src={rgb} className=\"rgb\" />\n                  <div className=\"para\">\n                    There are three types of cones in the eye for processing\n                    red, blue, and green light. Here you can see what\n                    wavelengths of light activate each cone. At 525nm, we see\n                    each cone will get activated and send a signal to the brain,\n                    so how will it determine the color? The brain uses the ratio\n                    of signals sent from each cone to get the color, but some of\n                    these colors send more data than others. You'll notice there\n                    is a large overlap between the red and green cones. This\n                    means that the brain is extra sensitive towards changes in\n                    color around 600nm since there is such a large overlap. This\n                    has been speculated to be used in early humans for\n                    determining ripeness of fruit and vegetables.\n                  </div>\n                  <div className=\"sources\">Cited Sources</div>\n                  <div className=\"sources\">\n                    “Research Collective Blog - Designing the Stop Sign.”\n                    Research Collective, 22 Feb. 2019,\n                    research-collective.com/blog/human-factors-history-designing-stop-sign/.\n                  </div>\n                  <div className=\"sources\">\n                    Kazilek. “Rods and Cones.” Kazilek, 6 Jan. 2010,\n                    askabiologist.asu.edu/rods-and-cones.\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\n\nimport Colors from \"./containers/Colors\";\n\nexport default () => (\n  <Switch>\n    <Route path=\"/\" exact component={Colors} />{\" \"}\n  </Switch>\n);\n","\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Navbar } from \"react-bootstrap\";\nimport \"./App.css\";\nimport Routes from \"./Routes\";\nimport { Provider } from './Context';\n\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.updateContext = (context) => {\n      localStorage.setItem('myData', JSON.stringify(context));\n      this.setState(context)\n    }\n\n}\n  render() {\n    return (\n        <Provider value={this.state}>         \n          <Routes />\n        </Provider>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { HashRouter as Router } from \"react-router-dom\";\n\n\nReactDOM.render(\n    <Router basename=\"/colorvisual\">\n      <App />\n    </Router>,\n    document.getElementById(\"root\")\n  );\n\nserviceWorker.unregister();\n\n"],"sourceRoot":""}